package com.wade.decompiler.generate.instructions;

import com.wade.decompiler.classfile.instructions.*;
import com.wade.decompiler.classfile.instructions.base.Instruction;
import com.wade.decompiler.decompiler.ExpressionStack;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Setter
@Getter
@ToString(callSuper = false, includeFieldNames = true)
@EqualsAndHashCode(callSuper = false)
public abstract class InstructionGen {
    private int offset;
    private int length;

    public InstructionGen(int offset, int length) {
        this.offset = offset;
        this.length = length;
    }

    public static InstructionGen read(int offset, Instruction instr) {
        InstructionGen instrgen = switch (instr.getOpcode()) {
            case AALOAD -> new ArrayLoadGen(offset, (AALOAD) instr);
            case AASTORE -> new ArrayStoreGen(offset, (AASTORE) instr);
            case ACONST_NULL -> new ConstGen(offset, (ACONST_NULL) instr);
            case ALOAD -> new LoadGen(offset, (ALOAD) instr);
            case ALOAD_0 -> new LoadGen(offset, (ALOAD) instr);
            case ALOAD_1 -> new LoadGen(offset, (ALOAD) instr);
            case ALOAD_2 -> new LoadGen(offset, (ALOAD) instr);
            case ALOAD_3 -> new LoadGen(offset, (ALOAD) instr);
            case ANEWARRAY -> new NewGen(offset, (ANEWARRAY) instr);
            case ARETURN -> new ReturnGen(offset, (ARETURN) instr);
            case ARRAYLENGTH -> new ArrayLengthGen(offset, (ARRAYLENGTH) instr);
            case ASTORE -> new StoreGen(offset, (ASTORE) instr);
            case ASTORE_0 -> new StoreGen(offset, (ASTORE) instr);
            case ASTORE_1 -> new StoreGen(offset, (ASTORE) instr);
            case ASTORE_2 -> new StoreGen(offset, (ASTORE) instr);
            case ASTORE_3 -> new StoreGen(offset, (ASTORE) instr);
            case ATHROW -> new AThrowGen(offset, (ATHROW) instr);
            case BALOAD -> new ArrayLoadGen(offset, (BALOAD) instr);
            case BASTORE -> new ArrayStoreGen(offset, (BASTORE) instr);
            case BIPUSH -> new ConstGen(offset, (BIPUSH) instr);
            case BREAKPOINT -> new BreakPointGen(offset, (BREAKPOINT) instr);
            case CALOAD -> new ArrayLoadGen(offset, (CALOAD) instr);
            case CASTORE -> new ArrayStoreGen(offset, (CASTORE) instr);
            case CHECKCAST -> new CheckCastGen(offset, (CHECKCAST) instr);
            case D2F -> new ConversionGen(offset, (D2F) instr);
            case D2I -> new ConversionGen(offset, (D2I) instr);
            case D2L -> new ConversionGen(offset, (D2L) instr);
            case DADD -> new ArithmeticGen(offset, (DADD) instr);
            case DALOAD -> new ArrayLoadGen(offset, (DALOAD) instr);
            case DASTORE -> new ArrayStoreGen(offset, (DASTORE) instr);
            case DCMPG -> new CompareGen(offset, (DCMPG) instr);
            case DCMPL -> new CompareGen(offset, (DCMPL) instr);
            case DCONST_0 -> new ConstGen(offset, (DCONST) instr);
            case DCONST_1 -> new ConstGen(offset, (DCONST) instr);
            case DDIV -> new ArithmeticGen(offset, (DDIV) instr);
            case DLOAD -> new LoadGen(offset, (DLOAD) instr);
            case DLOAD_0 -> new LoadGen(offset, (DLOAD) instr);
            case DLOAD_1 -> new LoadGen(offset, (DLOAD) instr);
            case DLOAD_2 -> new LoadGen(offset, (DLOAD) instr);
            case DLOAD_3 -> new LoadGen(offset, (DLOAD) instr);
            case DMUL -> new ArithmeticGen(offset, (DMUL) instr);
            case DNEG -> new ArithmeticGen(offset, (DNEG) instr);
            case DREM -> new ArithmeticGen(offset, (DREM) instr);
            case DRETURN -> new ReturnGen(offset, (DRETURN) instr);
            case DSTORE -> new StoreGen(offset, (DSTORE) instr);
            case DSTORE_0 -> new StoreGen(offset, (DSTORE) instr);
            case DSTORE_1 -> new StoreGen(offset, (DSTORE) instr);
            case DSTORE_2 -> new StoreGen(offset, (DSTORE) instr);
            case DSTORE_3 -> new StoreGen(offset, (DSTORE) instr);
            case DSUB -> new ArithmeticGen(offset, (DSUB) instr);
            case DUP_X1 -> new DuplicateGen(offset, (DUP_X1) instr);
            case DUP_X2 -> new DuplicateGen(offset, (DUP_X2) instr);
            case DUP -> new DuplicateGen(offset, (DUP) instr);
            case DUP2_X1 -> new DuplicateGen(offset, (DUP2_X1) instr);
            case DUP2_X2 -> new DuplicateGen(offset, (DUP2_X2) instr);
            case DUP2 -> new DuplicateGen(offset, (DUP2) instr);
            case F2D -> new ConversionGen(offset, (F2D) instr);
            case F2I -> new ConversionGen(offset, (F2I) instr);
            case F2L -> new ConversionGen(offset, (F2L) instr);
            case FADD -> new ArithmeticGen(offset, (FADD) instr);
            case FALOAD -> new ArrayLoadGen(offset, (FALOAD) instr);
            case FASTORE -> new ArrayStoreGen(offset, (FASTORE) instr);
            case FCMPG -> new CompareGen(offset, (FCMPG) instr);
            case FCMPL -> new CompareGen(offset, (FCMPG) instr);
            case FCONST_0 -> new ConstGen(offset, (FCONST) instr);
            case FCONST_1 -> new ConstGen(offset, (FCONST) instr);
            case FCONST_2 -> new ConstGen(offset, (FCONST) instr);
            case FDIV -> new ArithmeticGen(offset, (FDIV) instr);
            case FLOAD -> new LoadGen(offset, (FLOAD) instr);
            case FLOAD_0 -> new LoadGen(offset, (FLOAD) instr);
            case FLOAD_1 -> new LoadGen(offset, (FLOAD) instr);
            case FLOAD_2 -> new LoadGen(offset, (FLOAD) instr);
            case FLOAD_3 -> new LoadGen(offset, (FLOAD) instr);
            case FMUL -> new ArithmeticGen(offset, (FMUL) instr);
            case FNEG -> new ArithmeticGen(offset, (FNEG) instr);
            case FREM -> new ArithmeticGen(offset, (FREM) instr);
            case FRETURN -> new ReturnGen(offset, (FRETURN) instr);
            case FSTORE -> new StoreGen(offset, (FSTORE) instr);
            case FSTORE_0 -> new StoreGen(offset, (FSTORE) instr);
            case FSTORE_1 -> new StoreGen(offset, (FSTORE) instr);
            case FSTORE_2 -> new StoreGen(offset, (FSTORE) instr);
            case FSTORE_3 -> new StoreGen(offset, (FSTORE) instr);
            case FSUB -> new ArithmeticGen(offset, (FSUB) instr);
            case GETFIELD -> new GetFieldGen(offset, (GETFIELD) instr);
            case GETSTATIC -> new GetFieldGen(offset, (GETSTATIC) instr);
            case GOTO_W -> new GotoGen(offset, (GOTO_W) instr);
            case GOTO -> new GotoGen(offset, (GOTO) instr);
            case I2B -> new ConversionGen(offset, (I2B) instr);
            case I2C -> new ConversionGen(offset, (I2C) instr);
            case I2D -> new ConversionGen(offset, (I2D) instr);
            case I2F -> new ConversionGen(offset, (I2F) instr);
            case I2L -> new ConversionGen(offset, (I2L) instr);
            case I2S -> new ConversionGen(offset, (I2S) instr);
            case IADD -> new ArithmeticGen(offset, (IADD) instr);
            case IALOAD -> new ArrayLoadGen(offset, (IALOAD) instr);
            case IAND -> new ArithmeticGen(offset, (IAND) instr);
            case IASTORE -> new ArrayStoreGen(offset, (IASTORE) instr);
            case ICONST_M1 -> new ConstGen(offset, (ICONST) instr);
            case ICONST_0 -> new ConstGen(offset, (ICONST) instr);
            case ICONST_1 -> new ConstGen(offset, (ICONST) instr);
            case ICONST_2 -> new ConstGen(offset, (ICONST) instr);
            case ICONST_3 -> new ConstGen(offset, (ICONST) instr);
            case ICONST_4 -> new ConstGen(offset, (ICONST) instr);
            case ICONST_5 -> new ConstGen(offset, (ICONST) instr);
            case IDIV -> new ArithmeticGen(offset, (IDIV) instr);
            case IF_ACMPEQ -> new CompareGen(offset, (IF_ACMPEQ) instr);
            case IF_ACMPNE -> new CompareGen(offset, (IF_ACMPNE) instr);
            case IF_ICMPEQ -> new CompareGen(offset, (IF_ICMPEQ) instr);
            case IF_ICMPGE -> new CompareGen(offset, (IF_ICMPGE) instr);
            case IF_ICMPGT -> new CompareGen(offset, (IF_ICMPGT) instr);
            case IF_ICMPLE -> new CompareGen(offset, (IF_ICMPLE) instr);
            case IF_ICMPLT -> new CompareGen(offset, (IF_ICMPLT) instr);
            case IF_ICMPNE -> new CompareGen(offset, (IF_ICMPNE) instr);
            case IFEQ -> new CompareGen(offset, (IFEQ) instr);
            case IFGE -> new CompareGen(offset, (IFGE) instr);
            case IFGT -> new CompareGen(offset, (IFGT) instr);
            case IFLE -> new CompareGen(offset, (IFLE) instr);
            case IFLT -> new CompareGen(offset, (IFLT) instr);
            case IFNE -> new CompareGen(offset, (IFNE) instr);
            case IFNULL -> new CompareGen(offset, (IFNULL) instr);
            case IFNONNULL -> new CompareGen(offset, (IFNONNULL) instr);
            case IINC -> new IncGen(offset, (IINC) instr);
            case ILOAD -> new LoadGen(offset, (ILOAD) instr);
            case ILOAD_0 -> new LoadGen(offset, (ILOAD) instr);
            case ILOAD_1 -> new LoadGen(offset, (ILOAD) instr);
            case ILOAD_2 -> new LoadGen(offset, (ILOAD) instr);
            case ILOAD_3 -> new LoadGen(offset, (ILOAD) instr);
            case IMPDEP1 -> new ImpDepGen(offset, (IMPDEP1) instr);
            case IMPDEP2 -> new ImpDepGen(offset, (IMPDEP2) instr);
            case IMUL -> new ArithmeticGen(offset, (IMUL) instr);
            case INEG -> new ArithmeticGen(offset, (INEG) instr);
            case INSTANCEOF -> new InstanceOfGen(offset, (INSTANCEOF) instr);
            case INVOKEDYNAMIC -> new InvokeGen(offset, (INVOKEDYNAMIC) instr);
            case INVOKEINTERFACE -> new InvokeGen(offset, (INVOKEINTERFACE) instr);
            case INVOKESPECIAL -> new InvokeGen(offset, (INVOKESPECIAL) instr);
            case INVOKESTATIC -> new InvokeGen(offset, (INVOKESTATIC) instr);
            case INVOKEVIRTUAL -> new InvokeGen(offset, (INVOKEVIRTUAL) instr);
            case IOR -> new ArithmeticGen(offset, (IOR) instr);
            case IREM -> new ArithmeticGen(offset, (IREM) instr);
            case IRETURN -> new ReturnGen(offset, (IRETURN) instr);
            case ISHL -> new ArithmeticGen(offset, (ISHL) instr);
            case ISHR -> new ArithmeticGen(offset, (ISHR) instr);
            case ISTORE -> new StoreGen(offset, (ISTORE) instr);
            case ISTORE_0 -> new StoreGen(offset, (ISTORE) instr);
            case ISTORE_1 -> new StoreGen(offset, (ISTORE) instr);
            case ISTORE_2 -> new StoreGen(offset, (ISTORE) instr);
            case ISTORE_3 -> new StoreGen(offset, (ISTORE) instr);
            case ISUB -> new ArithmeticGen(offset, (ISUB) instr);
            case IUSHR -> new ArithmeticGen(offset, (IUSHR) instr);
            case IXOR -> new ArithmeticGen(offset, (IXOR) instr);
            case JSR_W -> new JsrGen(offset, (JSR_W) instr);
            case JSR -> new JsrGen(offset, (JSR) instr);
            case L2D -> new ConversionGen(offset, (L2D) instr);
            case L2F -> new ConversionGen(offset, (L2F) instr);
            case L2I -> new ConversionGen(offset, (L2I) instr);
            case LADD -> new ArithmeticGen(offset, (LADD) instr);
            case LALOAD -> new ArrayLoadGen(offset, (LALOAD) instr);
            case LAND -> new ArithmeticGen(offset, (LAND) instr);
            case LASTORE -> new ArrayStoreGen(offset, (LASTORE) instr);
            case LCMP -> new CompareGen(offset, (LCMP) instr);
            case LCONST_0 -> new ConstGen(offset, (LCONST) instr);
            case LCONST_1 -> new ConstGen(offset, (LCONST) instr);
            case LDC_W -> new ConstGen(offset, (LDC_W) instr);
            case LDC -> new ConstGen(offset, (LDC) instr);
            case LDC2_W -> new ConstGen(offset, (LDC2_W) instr);
            case LDIV -> new ArithmeticGen(offset, (LDIV) instr);
            case LLOAD -> new LoadGen(offset, (LLOAD) instr);
            case LLOAD_0 -> new LoadGen(offset, (LLOAD) instr);
            case LLOAD_1 -> new LoadGen(offset, (LLOAD) instr);
            case LLOAD_2 -> new LoadGen(offset, (LLOAD) instr);
            case LLOAD_3 -> new LoadGen(offset, (LLOAD) instr);
            case LMUL -> new ArithmeticGen(offset, (LMUL) instr);
            case LNEG -> new ArithmeticGen(offset, (LNEG) instr);
            case LOOKUPSWITCH -> new LookupSwitchGen(offset, (LOOKUPSWITCH) instr);
            case LOR -> new ArithmeticGen(offset, (LOR) instr);
            case LREM -> new ArithmeticGen(offset, (LREM) instr);
            case LRETURN -> new ReturnGen(offset, (LRETURN) instr);
            case LSHL -> new ArithmeticGen(offset, (LSHL) instr);
            case LSHR -> new ArithmeticGen(offset, (LSHR) instr);
            case LSTORE -> new StoreGen(offset, (LSTORE) instr);
            case LSTORE_0 -> new StoreGen(offset, (LSTORE) instr);
            case LSTORE_1 -> new StoreGen(offset, (LSTORE) instr);
            case LSTORE_2 -> new StoreGen(offset, (LSTORE) instr);
            case LSTORE_3 -> new StoreGen(offset, (LSTORE) instr);
            case LSUB -> new ArithmeticGen(offset, (LSUB) instr);
            case LUSHR -> new ArithmeticGen(offset, (LUSHR) instr);
            case LXOR -> new ArithmeticGen(offset, (LXOR) instr);
            case MONITORENTER -> new MonitorGen(offset, (MONITORENTER) instr);
            case MONITOREXIT -> new MonitorGen(offset, (MONITOREXIT) instr);
            case MULTIANEWARRAY -> new NewGen(offset, (MULTIANEWARRAY) instr);
            case NEW -> new NewGen(offset, (NEW) instr);
            case NEWARRAY -> new NewGen(offset, (NEWARRAY) instr);
            case NOP -> new NopGen(offset, (NOP) instr);
            case POP -> new PopGen(offset, (POP) instr);
            case POP2 -> new PopGen(offset, (POP2) instr);
            case PUTFIELD -> new PutFieldGen(offset, (PUTFIELD) instr);
            case PUTSTATIC -> new PutFieldGen(offset, (PUTSTATIC) instr);
            case RET -> new ReturnGen(offset, (RET) instr);
            case RETURN -> new ReturnGen(offset, (RETURN) instr);
            case SALOAD -> new ArrayLoadGen(offset, (SALOAD) instr);
            case SASTORE -> new ArrayStoreGen(offset, (SASTORE) instr);
            case SIPUSH -> new ConstGen(offset, (SIPUSH) instr);
            case SWAP -> new SwapGen(offset, (SWAP) instr);
            case TABLESWITCH -> new TableSwitchGen(offset, (TABLESWITCH) instr);
            default -> {
                System.out.println(instr);
                yield null;
            }
        };
        return instrgen;
    }

    public abstract String decompile(ExpressionStack stack);
}
