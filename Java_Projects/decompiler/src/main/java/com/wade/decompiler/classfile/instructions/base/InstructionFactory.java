package com.wade.decompiler.classfile.instructions.base;

import java.io.IOException;

import com.wade.decompiler.classfile.constant.ConstantPool;
import com.wade.decompiler.classfile.exceptions.ClassGenException;
import com.wade.decompiler.classfile.instructions.*;
import com.wade.decompiler.enums.InstructionOpCodes;
import com.wade.decompiler.generate.attribute.LocalVariableTableGen;
import com.wade.decompiler.util.ByteSequence;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Setter
@Getter
@ToString(callSuper = true, includeFieldNames = true)
@EqualsAndHashCode(callSuper = false)
public class InstructionFactory {
    private static Instruction getInstructions(InstructionOpCodes opcode, LocalVariableTableGen localVariableTable, ConstantPool cp) {
        Instruction obj = switch (opcode) {
            case AALOAD -> new AALOAD(cp);
            case AASTORE -> new AASTORE(cp);
            case ACONST_NULL -> new ACONST_NULL(cp);
            case ALOAD -> new ALOAD(localVariableTable, cp);
            case ALOAD_0 -> new ALOAD(0, localVariableTable, cp);
            case ALOAD_1 -> new ALOAD(1, localVariableTable, cp);
            case ALOAD_2 -> new ALOAD(2, localVariableTable, cp);
            case ALOAD_3 -> new ALOAD(3, localVariableTable, cp);
            case ANEWARRAY -> new ANEWARRAY(cp);
            case ARETURN -> new ARETURN(cp);
            case ARRAYLENGTH -> new ARRAYLENGTH(cp);
            case ASTORE -> new ASTORE(localVariableTable, cp);
            case ASTORE_0 -> new ASTORE(0, localVariableTable, cp);
            case ASTORE_1 -> new ASTORE(1, localVariableTable, cp);
            case ASTORE_2 -> new ASTORE(2, localVariableTable, cp);
            case ASTORE_3 -> new ASTORE(3, localVariableTable, cp);
            case ATHROW -> new ATHROW(cp);
            case BALOAD -> new BALOAD(cp);
            case BASTORE -> new BASTORE(cp);
            case BIPUSH -> new BIPUSH(cp);
            case BREAKPOINT -> new BREAKPOINT(cp);
            case CALOAD -> new CALOAD(cp);
            case CASTORE -> new CASTORE(cp);
            case CHECKCAST -> new CHECKCAST(-1, cp);
            case D2F -> new D2F(cp);
            case D2I -> new D2I(cp);
            case D2L -> new D2L(cp);
            case DADD -> new DADD(cp);
            case DALOAD -> new DALOAD(cp);
            case DASTORE -> new DASTORE(cp);
            case DCMPG -> new DCMPG(cp);
            case DCMPL -> new DCMPL(cp);
            case DCONST_0 -> new DCONST(0, cp);
            case DCONST_1 -> new DCONST(1, cp);
            case DDIV -> new DDIV(cp);
            case DLOAD -> new DLOAD(localVariableTable, cp);
            case DLOAD_0 -> new DLOAD(0, localVariableTable, cp);
            case DLOAD_1 -> new DLOAD(1, localVariableTable, cp);
            case DLOAD_2 -> new DLOAD(2, localVariableTable, cp);
            case DLOAD_3 -> new DLOAD(3, localVariableTable, cp);
            case DMUL -> new DMUL(cp);
            case DNEG -> new DNEG(cp);
            case DREM -> new DREM(cp);
            case DRETURN -> new DRETURN(cp);
            case DSTORE -> new DSTORE(localVariableTable, cp);
            case DSTORE_0 -> new DSTORE(0, localVariableTable, cp);
            case DSTORE_1 -> new DSTORE(1, localVariableTable, cp);
            case DSTORE_2 -> new DSTORE(2, localVariableTable, cp);
            case DSTORE_3 -> new DSTORE(3, localVariableTable, cp);
            case DSUB -> new DSUB(cp);
            case DUP_X1 -> new DUP_X1(cp);
            case DUP_X2 -> new DUP_X2(cp);
            case DUP -> new DUP(cp);
            case DUP2_X1 -> new DUP2_X1(cp);
            case DUP2_X2 -> new DUP2_X2(cp);
            case DUP2 -> new DUP2(cp);
            case F2D -> new F2D(cp);
            case F2I -> new F2I(cp);
            case F2L -> new F2L(cp);
            case FADD -> new FADD(cp);
            case FALOAD -> new FALOAD(cp);
            case FASTORE -> new FASTORE(cp);
            case FCMPG -> new FCMPG(cp);
            case FCMPL -> new FCMPL(cp);
            case FCONST_0 -> new FCONST(0, cp);
            case FCONST_1 -> new FCONST(1, cp);
            case FCONST_2 -> new FCONST(2, cp);
            case FDIV -> new FDIV(cp);
            case FLOAD -> new FLOAD(localVariableTable, cp);
            case FLOAD_0 -> new FLOAD(0, localVariableTable, cp);
            case FLOAD_1 -> new FLOAD(1, localVariableTable, cp);
            case FLOAD_2 -> new FLOAD(2, localVariableTable, cp);
            case FLOAD_3 -> new FLOAD(3, localVariableTable, cp);
            case FMUL -> new FMUL(cp);
            case FNEG -> new FNEG(cp);
            case FREM -> new FREM(cp);
            case FRETURN -> new FRETURN(cp);
            case FSTORE -> new FSTORE(localVariableTable, cp);
            case FSTORE_0 -> new FSTORE(0, localVariableTable, cp);
            case FSTORE_1 -> new FSTORE(1, localVariableTable, cp);
            case FSTORE_2 -> new FSTORE(2, localVariableTable, cp);
            case FSTORE_3 -> new FSTORE(3, localVariableTable, cp);
            case FSUB -> new FSUB(cp);
            case GETFIELD -> new GETFIELD(cp);
            case GETSTATIC -> new GETSTATIC(cp);
            case GOTO_W -> new GOTO_W(cp);
            case GOTO -> new GOTO(cp);
            case I2B -> new I2B(cp);
            case I2C -> new I2C(cp);
            case I2D -> new I2D(cp);
            case I2F -> new I2F(cp);
            case I2L -> new I2L(cp);
            case I2S -> new I2S(cp);
            case IADD -> new IADD(cp);
            case IALOAD -> new IALOAD(cp);
            case IAND -> new IAND(cp);
            case IASTORE -> new IASTORE(cp);
            case ICONST_M1 -> new ICONST(-1, cp);
            case ICONST_0 -> new ICONST(0, cp);
            case ICONST_1 -> new ICONST(1, cp);
            case ICONST_2 -> new ICONST(2, cp);
            case ICONST_3 -> new ICONST(3, cp);
            case ICONST_4 -> new ICONST(4, cp);
            case ICONST_5 -> new ICONST(5, cp);
            case IDIV -> new IDIV(cp);
            case IF_ACMPEQ -> new IF_ACMPEQ(cp);
            case IF_ACMPNE -> new IF_ACMPNE(cp);
            case IF_ICMPEQ -> new IF_ICMPEQ(cp);
            case IF_ICMPGE -> new IF_ICMPGE(cp);
            case IF_ICMPGT -> new IF_ICMPGT(cp);
            case IF_ICMPLE -> new IF_ICMPLE(cp);
            case IF_ICMPLT -> new IF_ICMPLT(cp);
            case IF_ICMPNE -> new IF_ICMPNE(cp);
            case IFEQ -> new IFEQ(cp);
            case IFGE -> new IFGE(cp);
            case IFGT -> new IFGT(cp);
            case IFLE -> new IFLE(cp);
            case IFLT -> new IFLT(cp);
            case IFNE -> new IFNE(cp);
            case IFNULL -> new IFNULL(cp);
            case IFNONNULL -> new IFNONNULL(cp);
            case IINC -> new IINC(cp);
            case ILOAD -> new ILOAD(localVariableTable, cp);
            case ILOAD_0 -> new ILOAD(0, localVariableTable, cp);
            case ILOAD_1 -> new ILOAD(1, localVariableTable, cp);
            case ILOAD_2 -> new ILOAD(2, localVariableTable, cp);
            case ILOAD_3 -> new ILOAD(3, localVariableTable, cp);
            case IMPDEP1 -> new IMPDEP1(cp);
            case IMPDEP2 -> new IMPDEP2(cp);
            case IMUL -> new IMUL(cp);
            case INEG -> new INEG(cp);
            case INSTANCEOF -> new INSTANCEOF(cp);
            case INVOKEDYNAMIC -> new INVOKEDYNAMIC(cp);
            case INVOKEINTERFACE -> new INVOKEINTERFACE(cp);
            case INVOKESPECIAL -> new INVOKESPECIAL(cp);
            case INVOKESTATIC -> new INVOKESTATIC(cp);
            case INVOKEVIRTUAL -> new INVOKEVIRTUAL(cp);
            case IOR -> new IOR(cp);
            case IREM -> new IREM(cp);
            case IRETURN -> new IRETURN(cp);
            case ISHL -> new ISHL(cp);
            case ISHR -> new ISHR(cp);
            case ISTORE -> new ISTORE(localVariableTable, cp);
            case ISTORE_0 -> new ISTORE(0, localVariableTable, cp);
            case ISTORE_1 -> new ISTORE(1, localVariableTable, cp);
            case ISTORE_2 -> new ISTORE(2, localVariableTable, cp);
            case ISTORE_3 -> new ISTORE(3, localVariableTable, cp);
            case ISUB -> new ISUB(cp);
            case IUSHR -> new IUSHR(cp);
            case IXOR -> new IXOR(cp);
            case JSR_W -> new JSR_W(cp);
            case JSR -> new JSR(cp);
            case L2D -> new L2D(cp);
            case L2F -> new L2F(cp);
            case L2I -> new L2I(cp);
            case LADD -> new LADD(cp);
            case LALOAD -> new LALOAD(cp);
            case LAND -> new LAND(cp);
            case LASTORE -> new LASTORE(cp);
            case LCMP -> new LCMP(cp);
            case LCONST_0 -> new LCONST(0, cp);
            case LCONST_1 -> new LCONST(1, cp);
            case LDC_W -> new LDC_W(cp);
            case LDC -> new LDC(cp);
            case LDC2_W -> new LDC2_W(localVariableTable, cp);
            case LDIV -> new LDIV(cp);
            case LLOAD -> new LLOAD(localVariableTable, cp);
            case LLOAD_0 -> new LLOAD(0, localVariableTable, cp);
            case LLOAD_1 -> new LLOAD(1, localVariableTable, cp);
            case LLOAD_2 -> new LLOAD(2, localVariableTable, cp);
            case LLOAD_3 -> new LLOAD(3, localVariableTable, cp);
            case LMUL -> new LMUL(cp);
            case LNEG -> new LNEG(cp);
            case LOOKUPSWITCH -> new LOOKUPSWITCH(null, cp);
            case LOR -> new LOR(cp);
            case LREM -> new LREM(cp);
            case LRETURN -> new LRETURN(cp);
            case LSHL -> new LSHL(cp);
            case LSHR -> new LSHR(cp);
            case LSTORE -> new LSTORE(localVariableTable, cp);
            case LSTORE_0 -> new LSTORE(0, localVariableTable, cp);
            case LSTORE_1 -> new LSTORE(1, localVariableTable, cp);
            case LSTORE_2 -> new LSTORE(2, localVariableTable, cp);
            case LSTORE_3 -> new LSTORE(3, localVariableTable, cp);
            case LSUB -> new LSUB(cp);
            case LUSHR -> new LUSHR(cp);
            case LXOR -> new LXOR(cp);
            case MONITORENTER -> new MONITORENTER(cp);
            case MONITOREXIT -> new MONITOREXIT(cp);
            case MULTIANEWARRAY -> new MULTIANEWARRAY(cp);
            case NEW -> new NEW(cp);
            case NEWARRAY -> new NEWARRAY(cp);
            case NOP -> new NOP(cp);
            case POP -> new POP(cp);
            case POP2 -> new POP(cp);
            case PUTFIELD -> new PUTFIELD(cp);
            case PUTSTATIC -> new PUTSTATIC(cp);
            case RET -> new RET(cp);
            case RETURN -> new RETURN(cp);
            case SALOAD -> new SALOAD(cp);
            case SASTORE -> new SASTORE(cp);
            case SIPUSH -> new SIPUSH(cp);
            case SWAP -> new SWAP(cp);
            case TABLESWITCH -> new TABLESWITCH(null, cp);
            default -> throw new ClassGenException("Illegal opcode detected: " + opcode);
        };
        return obj;
    }

    public static Instruction readInstruction(ByteSequence bytes, LocalVariableTableGen localVariableTable, ConstantPool cp, int offset) throws IOException {
        boolean wide = false;
        InstructionOpCodes opcode = InstructionOpCodes.read(bytes.readUnsignedByte());
        if (opcode == InstructionOpCodes.WIDE) {
            wide = true;
            opcode = InstructionOpCodes.read(bytes.readUnsignedByte());
        }
        Instruction obj = getInstructions(opcode, localVariableTable, cp);
        if (wide && !((obj instanceof LocalVariableInstruction) || (obj instanceof IINC) || (obj instanceof RET))) {
            throw new ClassGenException("Illegal opcode after wide: " + opcode);
        }
        obj.setOpcode(opcode);
        obj.initFromFile(bytes, wide);
        obj.setOffset(offset);
        return obj;
    }
}
